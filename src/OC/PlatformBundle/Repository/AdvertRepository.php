<?php

namespace OC\PlatformBundle\Repository;
use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Tools\Pagination\Paginator;
/**
 * AdvertRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class AdvertRepository extends \Doctrine\ORM\EntityRepository
{
    // copy du findBy($id)
    public function myFindBy($id){
        $queryBuilder = $this->createQueryBuilder("a");
        $queryBuilder->where("a.id = :id")
                     ->setParameter("id", $id);

        return $queryBuilder->getQuery()->getResult();
    }

    public function findAuthorAndDate($author, $year){
        $queryBuilder = $this->createQueryBuilder("a");

        $queryBuilder->where("a.author = :author")
                     ->setParameter("author", $author)
                     ->andWhere("a.date = :year")
                     ->setParameter("year", $year)
                     ->orderBy("a.date", "DESC");

        return $queryBuilder->getQuery()->getResult();
    }

    public function getAdvertWithApplications(){
        $queryBuilder = $this->createQueryBuilder("a");
        $queryBuilder->where("a")
                    ->leftJoin("a.applications", "app")
                    ->addSelect("app");

        return $queryBuilder;
    }

    public function getAdvertWithCategories(array $categoryNames){
        $queryBuilder = $this->createQueryBuilder("a");
        $queryBuilder->where("a")
                     ->leftJoin("a.categories", "c")
                     ->addSelect("c");
        $queryBuilder->where($queryBuilder->expr()->in("c.name", $categoryNames));

        return $queryBuilder->getQuery()->getResult();
    }

    public function getAdvert(){
        $qb = $this->createQueryBuilder("a")
            ->leftJoin("a.image", "i")
            ->addSelect("i")
            ->leftJoin("a.categories", "c")
            ->addSelect("c")
            ->orderBy("a.date", "DESC")
            ->getQuery();

        return $qb->getResult();
    }

    public function getAdverts($page, $nbPerPage){
        $qb = $this->createQueryBuilder("a")
            ->leftJoin("a.image", "i")
            ->addSelect("i")
            ->leftJoin("a.categories", "c")
            ->addSelect("c")
            ->orderBy("a.date", "DESC")
            ->getQuery();

        $qb->setFirstResult(($page-1)*$nbPerPage)
            ->setMaxResults($nbPerPage);

        return new Paginator($qb, true);
    }
}
